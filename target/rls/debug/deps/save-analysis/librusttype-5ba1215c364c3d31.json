{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.0","prelude":{"crate_id":{"name":"rusttype","disambiguator":[15010053459879645070,1547596436711328597]},"crate_root":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src","external_crates":[{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1307701420237324101,9952409239754731171]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3891028850780969662,11860656977252248702]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5748303080469865757,2496726973515729971]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[3075263514403435422,10845718462430689131]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[5329388063581846438,7620608119039677795]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10560054932714808400,15646703698321725095]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1684386597745790403,15726878300687201046]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[461077885925918245,3285404758122915049]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[10410579762577566083,16795925981071687463]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":10,"id":{"name":"rusttype","disambiguator":[17829619460960310897,13610409721995852210]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":11,"id":{"name":"approx","disambiguator":[10473549242063710896,17248000700960627609]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":12,"id":{"name":"num_traits","disambiguator":[8819346818811131509,12859631838872643486]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":13,"id":{"name":"arrayvec","disambiguator":[17729742874718265571,15575134501319077013]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":14,"id":{"name":"nodrop","disambiguator":[4700025977576454901,2233920376005017521]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":15,"id":{"name":"ordered_float","disambiguator":[9554808937527250813,1870134533217624285]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":16,"id":{"name":"num_traits","disambiguator":[13517274713475713944,6853196405925952811]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":17,"id":{"name":"unreachable","disambiguator":[16846469307284986578,4744923936861077443]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":18,"id":{"name":"void","disambiguator":[10292973225192661487,3125865177372358744]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":19,"id":{"name":"stb_truetype","disambiguator":[16763305276244577699,10107182553895503013]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","num":20,"id":{"name":"byteorder","disambiguator":[5064434125939657982,9491068200124538979]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/gpu_cache.rs","num":21,"id":{"name":"linked_hash_map","disambiguator":[4599138790806227758,3077290430592363100]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/gpu_cache.rs","num":22,"id":{"name":"rustc_hash","disambiguator":[5579273530584338182,2775866874885413793]}}],"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":5409,"line_start":1,"line_end":110,"column_start":1,"column_end":21}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5407,"byte_end":5408,"line_start":110,"line_end":110,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Rect, GlyphId, PositionedGlyph, vector, Vector, Point, point","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":5409,"line_start":1,"line_end":110,"column_start":1,"column_end":21},"name":"","qualname":"::","value":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":148}],"decl_id":null,"docs":" RustType is a pure Rust alternative to libraries like FreeType.","sig":null,"attributes":[{"value":"allow(unknown_lints)","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4888,"byte_end":4912,"line_start":91,"line_end":91,"column_start":1,"column_end":25}},{"value":"warn(clippy)","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4913,"byte_end":4929,"line_start":92,"line_end":92,"column_start":1,"column_end":17}},{"value":"allow(cyclomatic_complexity,\n        doc_markdown,\n        cast_lossless,\n        many_single_char_names)","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4930,"byte_end":5015,"line_start":93,"line_end":93,"column_start":1,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gpu_cache","qualname":"::gpu_cache","value":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/rusttype-0.6.5/src/gpu_cache.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":150},{"krate":0,"index":174},{"krate":0,"index":170},{"krate":0,"index":166},{"krate":0,"index":160},{"krate":0,"index":156},{"krate":0,"index":152},{"krate":0,"index":176},{"krate":0,"index":192},{"krate":0,"index":188},{"krate":0,"index":182},{"krate":0,"index":178},{"krate":0,"index":58},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":196},{"krate":0,"index":202},{"krate":0,"index":198},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":206},{"krate":0,"index":232},{"krate":0,"index":228},{"krate":0,"index":224},{"krate":0,"index":220},{"krate":0,"index":216},{"krate":0,"index":212},{"krate":0,"index":208},{"krate":0,"index":102},{"krate":0,"index":106},{"krate":0,"index":234},{"krate":0,"index":260},{"krate":0,"index":256},{"krate":0,"index":252},{"krate":0,"index":248},{"krate":0,"index":244},{"krate":0,"index":240},{"krate":0,"index":236},{"krate":0,"index":110},{"krate":0,"index":114},{"krate":0,"index":118},{"krate":0,"index":120}],"decl_id":null,"docs":" This module provides capabilities for managing a cache of rendered glyphs in\n GPU memory, with the goal of minimisng the size and frequency of glyph\n uploads to GPU memory from the CPU.","sig":null,"attributes":[{"value":"cfg(feature = \"gpu_cache\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5259,"byte_end":5288,"line_start":106,"line_end":106,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":8436,"byte_end":8449,"line_start":57,"line_end":57,"column_start":10,"column_end":23},"name":"TextureCoords","qualname":"::gpu_cache::TextureCoords","value":"(Rect<f32>, Rect<i32>)","parent":null,"children":[],"decl_id":null,"docs":" Texture coordinates (floating point) of the quad for a glyph in the cache,\n as well as the pixel-space (integer) coordinates that this region should be\n drawn at.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":11316,"byte_end":11321,"line_start":169,"line_end":169,"column_start":12,"column_end":17},"name":"Cache","qualname":"::gpu_cache::Cache","value":"Cache {  }","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" An implementation of a dynamic GPU glyph cache. See the module documentation\n for more information.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":196},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":12300,"byte_end":12312,"line_start":207,"line_end":207,"column_start":12,"column_end":24},"name":"CacheBuilder","qualname":"::gpu_cache::CacheBuilder","value":"CacheBuilder { width, height, scale_tolerance, position_tolerance, pad_glyphs }","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91}],"decl_id":null,"docs":" Builder for a `Cache`.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":83},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":12634,"byte_end":12639,"line_start":214,"line_end":214,"column_start":9,"column_end":14},"name":"width","qualname":"::gpu_cache::CacheBuilder::width","value":"u32","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" Along with `height` specifies the dimensions of the 2D texture that will\n hold the cache contents on the GPU.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":85},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":12964,"byte_end":12970,"line_start":221,"line_end":221,"column_start":9,"column_end":15},"name":"height","qualname":"::gpu_cache::CacheBuilder::height","value":"u32","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" Along with `width` specifies the dimensions of the 2D texture that will\n hold the cache contents on the GPU.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":87},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":13877,"byte_end":13892,"line_start":237,"line_end":237,"column_start":9,"column_end":24},"name":"scale_tolerance","qualname":"::gpu_cache::CacheBuilder::scale_tolerance","value":"f32","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" Specifies the tolerances (maximum allowed difference) for judging\n whether an existing glyph in the cache is close enough to the\n requested glyph in scale to be used in its place. Due to floating\n point inaccuracies a min value of `0.001` is enforced.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":89},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":14980,"byte_end":14998,"line_start":257,"line_end":257,"column_start":9,"column_end":27},"name":"position_tolerance","qualname":"::gpu_cache::CacheBuilder::position_tolerance","value":"f32","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" Specifies the tolerances (maximum allowed difference) for judging\n whether an existing glyph in the cache is close enough to the requested\n glyph in subpixel offset to be used in its place. Due to floating\n point inaccuracies a min value of `0.001` is enforced.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":91},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":15289,"byte_end":15299,"line_start":263,"line_end":263,"column_start":9,"column_end":19},"name":"pad_glyphs","qualname":"::gpu_cache::CacheBuilder::pad_glyphs","value":"bool","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" Pack glyphs in texture with a padding of a single zero alpha pixel to\n avoid bleeding from interpolated shader texture lookups near edges.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":16209,"byte_end":16214,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"build","qualname":"<CacheBuilder>::build","value":"fn <'a> (self) -> Cache<'a>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new cache. Note that this is just the CPU side of the\n cache. The GPU texture is managed by the user.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":17242,"byte_end":17249,"line_start":336,"line_end":336,"column_start":12,"column_end":19},"name":"rebuild","qualname":"<CacheBuilder>::rebuild","value":"fn (self, cache: &mut Cache) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rebuilds a cache with new attributes. Carries over the existing cache\n queue unmodified.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":93},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":17892,"byte_end":17906,"line_start":358,"line_end":358,"column_start":5,"column_end":19},"name":"GlyphNotCached","qualname":"::gpu_cache::CacheReadErr::GlyphNotCached","value":"CacheReadErr::GlyphNotCached","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":" Indicates that the requested glyph is not present in the cache\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":206},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":17802,"byte_end":17814,"line_start":356,"line_end":356,"column_start":10,"column_end":22},"name":"CacheReadErr","qualname":"::gpu_cache::CacheReadErr","value":"CacheReadErr::{GlyphNotCached}","parent":null,"children":[{"krate":0,"index":93}],"decl_id":null,"docs":" Returned from `Cache::rect_for`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":17793,"byte_end":17909,"line_start":356,"line_end":359,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":17793,"byte_end":17909,"line_start":356,"line_end":359,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":95},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18503,"byte_end":18516,"line_start":378,"line_end":378,"column_start":5,"column_end":18},"name":"GlyphTooLarge","qualname":"::gpu_cache::CacheWriteErr::GlyphTooLarge","value":"CacheWriteErr::GlyphTooLarge","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" At least one of the queued glyphs is too big to fit into the cache, even\n if all other glyphs are removed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":97},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18654,"byte_end":18673,"line_start":381,"line_end":381,"column_start":5,"column_end":24},"name":"NoRoomForWholeQueue","qualname":"::gpu_cache::CacheWriteErr::NoRoomForWholeQueue","value":"CacheWriteErr::NoRoomForWholeQueue","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Not all of the requested glyphs can fit into the cache, even if the\n cache is completely cleared before the attempt.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":234},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18361,"byte_end":18374,"line_start":375,"line_end":375,"column_start":10,"column_end":23},"name":"CacheWriteErr","qualname":"::gpu_cache::CacheWriteErr","value":"CacheWriteErr::{GlyphTooLarge, NoRoomForWholeQueue}","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":97}],"decl_id":null,"docs":" Returned from `Cache::cache_queued`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18352,"byte_end":18676,"line_start":375,"line_end":382,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18352,"byte_end":18676,"line_start":375,"line_end":382,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":19765,"byte_end":19768,"line_start":420,"line_end":420,"column_start":12,"column_end":15},"name":"new","qualname":"<Cache<'font>>::new","value":"fn <'a> (width: u32, height: u32, scale_tolerance: f32, position_tolerance: f32) -> Cache<'a>","parent":null,"children":[],"decl_id":null,"docs":" Legacy `Cache` construction, use `CacheBuilder` for more options.","sig":null,"attributes":[{"value":"deprecated(note = \"Use `CacheBuilder` instead\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":19703,"byte_end":19753,"line_start":419,"line_end":419,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":20453,"byte_end":20472,"line_start":445,"line_end":445,"column_start":12,"column_end":31},"name":"set_scale_tolerance","qualname":"<Cache<'font>>::set_scale_tolerance","value":"fn (&mut self, scale_tolerance: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the scale tolerance for the cache. See the documentation for\n `CacheBuilder` for more information.","sig":null,"attributes":[{"value":"deprecated(note = \"Use `CacheBuilder::rebuild` instead\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":20382,"byte_end":20441,"line_start":444,"line_end":444,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":20692,"byte_end":20707,"line_start":452,"line_end":452,"column_start":12,"column_end":27},"name":"scale_tolerance","qualname":"<Cache<'font>>::scale_tolerance","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current scale tolerance for the cache.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":21146,"byte_end":21168,"line_start":465,"line_end":465,"column_start":12,"column_end":34},"name":"set_position_tolerance","qualname":"<Cache<'font>>::set_position_tolerance","value":"fn (&mut self, position_tolerance: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the subpixel position tolerance for the cache. See the\n documentation for `CacheBuilder` for more information.","sig":null,"attributes":[{"value":"deprecated(note = \"Use `CacheBuilder::rebuild` instead\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":21075,"byte_end":21134,"line_start":464,"line_end":464,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":21406,"byte_end":21424,"line_start":472,"line_end":472,"column_start":12,"column_end":30},"name":"position_tolerance","qualname":"<Cache<'font>>::position_tolerance","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current subpixel position tolerance for the cache.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":21644,"byte_end":21654,"line_start":477,"line_end":477,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<Cache<'font>>::dimensions","value":"fn (&self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Returns the cache texture dimensions assumed by the cache. For proper\n operation this should match the dimensions of the used GPU texture.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":21957,"byte_end":21968,"line_start":483,"line_end":483,"column_start":12,"column_end":23},"name":"queue_glyph","qualname":"<Cache<'font>>::queue_glyph","value":"fn (&mut self, font_id: usize, glyph: PositionedGlyph<'font>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Queue a glyph for caching by the next call to `cache_queued`. `font_id`\n is used to disambiguate glyphs from different fonts. The user should\n ensure that `font_id` is unique to the font the glyph is from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":22212,"byte_end":22217,"line_start":489,"line_end":489,"column_start":12,"column_end":17},"name":"clear","qualname":"<Cache<'font>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the cache. Does not affect the glyph queue.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":22539,"byte_end":22550,"line_start":499,"line_end":499,"column_start":12,"column_end":23},"name":"clear_queue","qualname":"<Cache<'font>>::clear_queue","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the glyph queue.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":22673,"byte_end":22683,"line_start":504,"line_end":504,"column_start":12,"column_end":22},"name":"to_builder","qualname":"<Cache<'font>>::to_builder","value":"fn (&self) -> CacheBuilder","parent":null,"children":[],"decl_id":null,"docs":" Returns a `CacheBuilder` with this cache's attributes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":24503,"byte_end":24515,"line_start":545,"line_end":545,"column_start":12,"column_end":24},"name":"cache_queued","qualname":"<Cache<'font>>::cache_queued","value":"fn <F> (&mut self, mut uploader: F) -> Result<(), CacheWriteErr>","parent":null,"children":[],"decl_id":null,"docs":" Caches the queued glyphs. If this is unsuccessful, the queue is\n untouched. Any glyphs cached by previous calls to this function may be\n removed from the cache to make room for the newly queued glyphs. Thus if\n you want to ensure that a glyph is in the cache, the most recently\n cached queue must have contained that glyph.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":34140,"byte_end":34148,"line_start":756,"line_end":756,"column_start":12,"column_end":20},"name":"rect_for","qualname":"<Cache<'font>>::rect_for","value":"fn (&self, font_id: usize, glyph: &PositionedGlyph) -> Result<Option<TextureCoords>, CacheReadErr>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the (floating point) texture coordinates of the quad for a\n glyph in the cache, as well as the pixel-space (integer) coordinates\n that this region should be drawn at. These pixel-space coordinates\n assume an origin at the top left of the quad. In the majority of cases\n these pixel-space coordinates should be identical to the bounding box of\n the input glyph. They only differ if the cache has returned a substitute\n glyph that is deemed close enough to the requested glyph as specified by\n the cache tolerance parameters.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":9372,"byte_end":9383,"line_start":86,"line_end":86,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":10121,"byte_end":10132,"line_start":119,"line_end":119,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":10340,"byte_end":10351,"line_start":128,"line_end":128,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":10972,"byte_end":10976,"line_start":156,"line_end":156,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":15327,"byte_end":15339,"line_start":266,"line_end":266,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":15558,"byte_end":15570,"line_start":278,"line_end":278,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":17932,"byte_end":17944,"line_start":360,"line_end":360,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18093,"byte_end":18105,"line_start":365,"line_end":365,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18699,"byte_end":18712,"line_start":383,"line_end":383,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18861,"byte_end":18874,"line_start":388,"line_end":388,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":19487,"byte_end":19492,"line_start":412,"line_end":412,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5297,"byte_end":5306,"line_start":107,"line_end":107,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":8}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":9372,"byte_end":9383,"line_start":86,"line_end":86,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":10121,"byte_end":10132,"line_start":119,"line_end":119,"column_start":44,"column_end":55},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":176},"to":{"krate":2,"index":1976}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":10340,"byte_end":10351,"line_start":128,"line_end":128,"column_start":47,"column_end":58},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":176},"to":{"krate":2,"index":1982}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":10972,"byte_end":10976,"line_start":156,"line_end":156,"column_start":23,"column_end":27},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":10,"index":604},"to":{"krate":0,"index":80}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":15327,"byte_end":15339,"line_start":266,"line_end":266,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":196},"to":{"krate":2,"index":2540}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":15558,"byte_end":15570,"line_start":278,"line_end":278,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":17932,"byte_end":17944,"line_start":360,"line_end":360,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":206},"to":{"krate":2,"index":7810}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18093,"byte_end":18105,"line_start":365,"line_end":365,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2338}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18699,"byte_end":18712,"line_start":383,"line_end":383,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":234},"to":{"krate":2,"index":7810}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":18861,"byte_end":18874,"line_start":388,"line_end":388,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":234},"to":{"krate":1,"index":2338}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,117,115,116,116,121,112,101,45,48,46,54,46,53,47,115,114,99,47,103,112,117,95,99,97,99,104,101,46,114,115],"byte_start":19487,"byte_end":19492,"line_start":412,"line_end":412,"column_start":13,"column_end":18},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}}]}