{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.0","prelude":{"crate_id":{"name":"itertools","disambiguator":[5266188093803818213,1480441190367209948]},"crate_root":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src","external_crates":[{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1307701420237324101,9952409239754731171]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3891028850780969662,11860656977252248702]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5748303080469865757,2496726973515729971]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[3075263514403435422,10845718462430689131]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[5329388063581846438,7620608119039677795]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10560054932714808400,15646703698321725095]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1684386597745790403,15726878300687201046]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[461077885925918245,3285404758122915049]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[10410579762577566083,16795925981071687463]}},{"file_name":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":10,"id":{"name":"either","disambiguator":[5639612363335100705,10169713510751636923]}}],"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":70470,"line_start":1,"line_end":2121,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":10,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":825,"byte_end":831,"line_start":32,"line_end":32,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":3704},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1164,"byte_end":1168,"line_start":49,"line_end":49,"column_start":14,"column_end":18},"alias_span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1172,"byte_end":1182,"line_start":49,"line_end":49,"column_start":22,"column_end":32},"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":400},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1268,"byte_end":1273,"line_start":54,"line_end":54,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1548},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1283,"byte_end":1293,"line_start":55,"line_end":55,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1558},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1303,"byte_end":1321,"line_start":56,"line_end":56,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1578},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1331,"byte_end":1338,"line_start":57,"line_end":57,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1568},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1348,"byte_end":1355,"line_start":58,"line_end":58,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1588},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1365,"byte_end":1373,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1596},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1383,"byte_end":1387,"line_start":60,"line_end":60,"column_start":9,"column_end":13},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":482},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1397,"byte_end":1407,"line_start":61,"line_end":61,"column_start":9,"column_end":19},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":340},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1417,"byte_end":1422,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":358},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1432,"byte_end":1439,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1449,"byte_end":1461,"line_start":64,"line_end":64,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1626},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1471,"byte_end":1480,"line_start":65,"line_end":65,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1490,"byte_end":1498,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1636},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1508,"byte_end":1525,"line_start":67,"line_end":67,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1720},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1535,"byte_end":1542,"line_start":68,"line_end":68,"column_start":9,"column_end":16},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":498},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1552,"byte_end":1561,"line_start":69,"line_end":69,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":514},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1571,"byte_end":1577,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1526},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1640,"byte_end":1652,"line_start":73,"line_end":73,"column_start":23,"column_end":35},"alias_span":null,"name":"MultiProduct","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":620},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1712,"byte_end":1724,"line_start":75,"line_end":75,"column_start":27,"column_end":39},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1834},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1756,"byte_end":1766,"line_start":76,"line_end":76,"column_start":31,"column_end":41},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1848},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1789,"byte_end":1795,"line_start":77,"line_end":77,"column_start":22,"column_end":28},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":664},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1797,"byte_end":1807,"line_start":77,"line_end":77,"column_start":30,"column_end":40},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":784},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1868,"byte_end":1878,"line_start":79,"line_end":79,"column_start":27,"column_end":37},"alias_span":null,"name":"IntoChunks","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":808},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1880,"byte_end":1885,"line_start":79,"line_end":79,"column_start":39,"column_end":44},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":800},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1887,"byte_end":1893,"line_start":79,"line_end":79,"column_start":46,"column_end":52},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":744},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1895,"byte_end":1902,"line_start":79,"line_end":79,"column_start":54,"column_end":61},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1904,"byte_end":1909,"line_start":79,"line_end":79,"column_start":63,"column_end":68},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":762},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1911,"byte_end":1917,"line_start":79,"line_end":79,"column_start":70,"column_end":76},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1896},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1945,"byte_end":1956,"line_start":80,"line_end":80,"column_start":26,"column_end":37},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":864},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2016,"byte_end":2022,"line_start":82,"line_end":82,"column_start":27,"column_end":33},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":882},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2024,"byte_end":2032,"line_start":82,"line_end":82,"column_start":35,"column_end":43},"alias_span":null,"name":"KMergeBy","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":914},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2059,"byte_end":2070,"line_start":83,"line_end":83,"column_start":25,"column_end":36},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1936},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2132,"byte_end":2141,"line_start":85,"line_end":85,"column_start":29,"column_end":38},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1946},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2165,"byte_end":2173,"line_start":86,"line_end":86,"column_start":23,"column_end":31},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1014},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2207,"byte_end":2223,"line_start":87,"line_end":87,"column_start":33,"column_end":49},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1992},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2259,"byte_end":2273,"line_start":88,"line_end":88,"column_start":35,"column_end":49},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1998},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2336,"byte_end":2344,"line_start":90,"line_end":90,"column_start":30,"column_end":38},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2008},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2403,"byte_end":2409,"line_start":92,"line_end":92,"column_start":26,"column_end":32},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2014},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2432,"byte_end":2439,"line_start":93,"line_end":93,"column_start":22,"column_end":29},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1138},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2463,"byte_end":2473,"line_start":94,"line_end":94,"column_start":23,"column_end":33},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2024},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2475,"byte_end":2481,"line_start":94,"line_end":94,"column_start":35,"column_end":41},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2030},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2483,"byte_end":2490,"line_start":94,"line_end":94,"column_start":43,"column_end":50},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2044},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2542,"byte_end":2545,"line_start":96,"line_end":96,"column_start":18,"column_end":21},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2050},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2572,"byte_end":2583,"line_start":97,"line_end":97,"column_start":26,"column_end":37},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2056},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2585,"byte_end":2597,"line_start":97,"line_end":97,"column_start":39,"column_end":51},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1216},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2599,"byte_end":2605,"line_start":97,"line_end":97,"column_start":53,"column_end":59},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2134},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2666,"byte_end":2672,"line_start":99,"line_end":99,"column_start":27,"column_end":33},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2126},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2674,"byte_end":2682,"line_start":99,"line_end":99,"column_start":35,"column_end":43},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1306},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2712,"byte_end":2724,"line_start":100,"line_end":100,"column_start":28,"column_end":40},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2160},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2751,"byte_end":2756,"line_start":101,"line_end":101,"column_start":26,"column_end":31},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2170},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2783,"byte_end":2793,"line_start":102,"line_end":102,"column_start":26,"column_end":36},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2180},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2817,"byte_end":2820,"line_start":103,"line_end":103,"column_start":23,"column_end":26},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":30}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2841,"byte_end":2842,"line_start":105,"line_end":105,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"TupleWindows, Tee, Combinations, Update, TupleCombinations, TakeWhileRef, ZipLongest, MapResults, PutBack, Interleave, UniqueBy, Tuples, PeekingTakeWhile, MergeJoinBy, KMerge, GroupBy, IntoChunks, Format, MultiProduct, Flatten, WhileSome, Merge, Batching, ZipEq, InterleaveShortest, PutBackN, PadUsing, KMergeBy, Intersperse, FormatWith, Positions, Coalesce, MergeBy, Step, Product, WithPosition, Dedup, Unique","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":472},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2862,"byte_end":2869,"line_start":106,"line_end":106,"column_start":19,"column_end":26},"alias_span":null,"name":"flatten","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":602},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2892,"byte_end":2898,"line_start":107,"line_end":107,"column_start":22,"column_end":28},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":612},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2926,"byte_end":2937,"line_start":108,"line_end":108,"column_start":27,"column_end":38},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":656},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2953,"byte_end":2962,"line_start":109,"line_end":109,"column_start":15,"column_end":24},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2978,"byte_end":2982,"line_start":110,"line_end":110,"column_start":15,"column_end":19},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":886},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3034,"byte_end":3043,"line_start":112,"line_end":112,"column_start":23,"column_end":32},"alias_span":null,"name":"kmerge_by","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1918},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3062,"byte_end":3074,"line_start":113,"line_end":113,"column_start":17,"column_end":29},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":998},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3104,"byte_end":3115,"line_start":114,"line_end":114,"column_start":29,"column_end":40},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1038},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3147,"byte_end":3162,"line_start":115,"line_end":115,"column_start":31,"column_end":46},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1094},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3181,"byte_end":3189,"line_start":116,"line_end":116,"column_start":18,"column_end":26},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1142},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3209,"byte_end":3220,"line_start":117,"line_end":117,"column_start":19,"column_end":30},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1152},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3222,"byte_end":3228,"line_start":117,"line_end":117,"column_start":32,"column_end":38},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1174},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3230,"byte_end":3237,"line_start":117,"line_end":117,"column_start":40,"column_end":47},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2142},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3263,"byte_end":3271,"line_start":118,"line_end":118,"column_start":24,"column_end":32},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3291,"byte_end":3299,"line_start":119,"line_end":119,"column_start":19,"column_end":27},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1730},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3359,"byte_end":3371,"line_start":122,"line_end":122,"column_start":25,"column_end":37},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":250},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111320,"byte_end":111330,"line_start":13,"line_end":13,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":348},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111336,"byte_end":111341,"line_start":14,"line_end":14,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111347,"byte_end":111355,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":1044},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111413,"byte_end":111423,"line_start":18,"line_end":18,"column_start":26,"column_end":36},"alias_span":null,"name":"put_back_n","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":944},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111477,"byte_end":111486,"line_start":20,"line_end":20,"column_start":25,"column_end":34},"alias_span":null,"name":"multipeek","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":868},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111537,"byte_end":111543,"line_start":22,"line_end":22,"column_start":22,"column_end":28},"alias_span":null,"name":"kmerge","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":1328},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111566,"byte_end":111572,"line_start":23,"line_end":23,"column_start":22,"column_end":28},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":912},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111594,"byte_end":111607,"line_start":24,"line_end":24,"column_start":21,"column_end":34},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":1066},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111658,"byte_end":111664,"line_start":26,"line_end":26,"column_start":22,"column_end":28},"alias_span":null,"name":"rciter","value":"","parent":{"krate":0,"index":540}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3431,"byte_end":3432,"line_start":126,"line_end":126,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"zip_eq, kmerge, merge_join_by, interleave, fold, merge","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":70470,"line_start":1,"line_end":2121,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":604},{"krate":0,"index":614},{"krate":0,"index":648},{"krate":0,"index":658},{"krate":0,"index":680},{"krate":0,"index":690},{"krate":0,"index":820},{"krate":0,"index":836},{"krate":0,"index":896},{"krate":0,"index":926},{"krate":0,"index":934},{"krate":0,"index":968},{"krate":0,"index":990},{"krate":0,"index":1028},{"krate":0,"index":1040},{"krate":0,"index":1058},{"krate":0,"index":1092},{"krate":0,"index":1110},{"krate":0,"index":1132},{"krate":0,"index":1176},{"krate":0,"index":1198},{"krate":0,"index":1256},{"krate":0,"index":1298},{"krate":0,"index":1324},{"krate":0,"index":1340},{"krate":0,"index":1372},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":2302},{"krate":0,"index":2312},{"krate":0,"index":2308},{"krate":0,"index":2304},{"krate":0,"index":1520}],"decl_id":null,"docs":" Itertools — extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1226,"byte_end":1233,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":80},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":136},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1526},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":104846,"byte_end":104858,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"MultiProduct","qualname":"::adaptors::multi_product::MultiProduct","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n multiple iterators of type `I`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":104761,"byte_end":104834,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1548},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":71882,"byte_end":71892,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1321},{"krate":0,"index":1323}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":71797,"byte_end":71870,"line_start":35,"line_end":35,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":72222,"byte_end":72232,"line_start":53,"line_end":53,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"fn <I, J> (i: I, j: J) -> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1558},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73497,"byte_end":73515,"line_start":99,"line_end":99,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1341}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73412,"byte_end":73485,"line_start":98,"line_end":98,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1568},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":75917,"byte_end":75924,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1355}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":270},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76061,"byte_end":76069,"line_start":196,"line_end":196,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"fn <I> (iterable: I) -> PutBack<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76318,"byte_end":76328,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"fn (mut self, value: I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76484,"byte_end":76494,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"fn (self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76463,"byte_end":76472,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76759,"byte_end":76767,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76738,"byte_end":76747,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1578},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78228,"byte_end":78235,"line_start":277,"line_end":277,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1371}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78143,"byte_end":78216,"line_start":276,"line_end":276,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81074,"byte_end":81082,"line_start":373,"line_end":373,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":1385},{"krate":0,"index":1387}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":80989,"byte_end":81062,"line_start":372,"line_end":372,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1596},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82123,"byte_end":82127,"line_start":413,"line_end":413,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":1395},{"krate":0,"index":1397}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82038,"byte_end":82111,"line_start":412,"line_end":412,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":340},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84875,"byte_end":84880,"line_start":527,"line_end":527,"column_start":12,"column_end":17},"name":"Merge","qualname":"::adaptors::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":133}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84790,"byte_end":84863,"line_start":526,"line_end":526,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":348},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85668,"byte_end":85673,"line_start":563,"line_end":563,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"fn <I, J> (i: I, j: J) -> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":358},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86746,"byte_end":86753,"line_start":600,"line_end":600,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":161}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86661,"byte_end":86734,"line_start":599,"line_end":599,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89304,"byte_end":89312,"line_start":701,"line_end":701,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":197}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89219,"byte_end":89292,"line_start":700,"line_end":700,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":400},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90543,"byte_end":90548,"line_start":756,"line_end":756,"column_start":12,"column_end":17},"name":"Dedup","qualname":"::adaptors::Dedup","value":"Dedup {  }","parent":null,"children":[{"krate":0,"index":217}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90458,"byte_end":90531,"line_start":755,"line_end":755,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":420},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92259,"byte_end":92271,"line_start":829,"line_end":829,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":243}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92174,"byte_end":92247,"line_start":828,"line_end":828,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1626},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93644,"byte_end":93653,"line_start":880,"line_end":880,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":1415}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93559,"byte_end":93632,"line_start":879,"line_end":879,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1636},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94504,"byte_end":94521,"line_start":914,"line_end":914,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":1425},{"krate":0,"index":1427},{"krate":0,"index":1429}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94419,"byte_end":94492,"line_start":913,"line_end":913,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":444},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94672,"byte_end":94686,"line_start":923,"line_end":923,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":446}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":446},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94708,"byte_end":94719,"line_start":924,"line_end":924,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1642},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95340,"byte_end":95357,"line_start":952,"line_end":952,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":1437}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1720},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":98051,"byte_end":98058,"line_start":1043,"line_end":1043,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::adaptors::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1525}],"decl_id":null,"docs":" An iterator adapter to simply flatten a structure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":97966,"byte_end":98039,"line_start":1042,"line_end":1042,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":472},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":98643,"byte_end":98650,"line_start":1066,"line_end":1066,"column_start":8,"column_end":15},"name":"flatten","qualname":"::adaptors::flatten","value":"fn <I, J> (iterable: I) -> Flatten<I::IntoIter, J>","parent":null,"children":[],"decl_id":null,"docs":" Flatten an iterable of iterables into a single combined sequence of all\n the elements in the iterables.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":482},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":100173,"byte_end":100183,"line_start":1117,"line_end":1117,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":305}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":100088,"byte_end":100161,"line_start":1116,"line_end":1116,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":498},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":101474,"byte_end":101483,"line_start":1166,"line_end":1166,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":347}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":101389,"byte_end":101462,"line_start":1165,"line_end":1165,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":514},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":102899,"byte_end":102905,"line_start":1224,"line_end":1224,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":367}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":102814,"byte_end":102887,"line_start":1223,"line_end":1223,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1539},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110811,"byte_end":110815,"line_start":5,"line_end":5,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1545},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110879,"byte_end":110883,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1549},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110945,"byte_end":110950,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":1730},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1730},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110753,"byte_end":110765,"line_start":3,"line_end":3,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"EitherOrBoth::{Both, Left, Right}","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1545},{"krate":0,"index":1549}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110744,"byte_end":110956,"line_start":3,"line_end":10,"column_start":1,"column_end":2}}]},{"kind":"Mod","id":{"krate":0,"index":540},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/Users/amori/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/free.rs","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":572},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111905,"byte_end":111914,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"fn <I> (iterable: I) -> iter::Enumerate<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":574},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":112236,"byte_end":112239,"line_start":56,"line_end":56,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"fn <I> (iterable: I) -> iter::Rev<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":576},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":112640,"byte_end":112643,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"fn <I, J> (i: I, j: J) -> Zip<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":578},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":113023,"byte_end":113028,"line_start":93,"line_end":93,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"fn <I, J> (i: I, j: J) -> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":580},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":113451,"byte_end":113457,"line_start":109,"line_end":109,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"fn <'a, I, T> (iterable: I) -> iter::Cloned<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":582},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":113845,"byte_end":113849,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"fn <I, B, F> (iterable: I, init: B, f: F) -> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":584},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":114224,"byte_end":114227,"line_start":141,"line_end":141,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":586},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":114587,"byte_end":114590,"line_start":157,"line_end":157,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":588},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":114915,"byte_end":114918,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":590},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":115231,"byte_end":115234,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":592},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":115627,"byte_end":115631,"line_start":207,"line_end":207,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"fn <I> (iterable: I, sep: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":115592,"byte_end":115619,"line_start":206,"line_end":206,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":594},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":116084,"byte_end":116090,"line_start":225,"line_end":225,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"fn <I> (iterable: I) -> Vec<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Collect all the iterable's elements into a sorted vector in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":116049,"byte_end":116076,"line_start":224,"line_end":224,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":602},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,99,97,116,95,105,109,112,108,46,114,115],"byte_start":116715,"byte_end":116721,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"fn <I> (iterable: I) -> I::Item","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1834},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118497,"byte_end":118507,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":1789}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118395,"byte_end":118468,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":612},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118848,"byte_end":118859,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"fn <I, J> (iterable: I) -> ConsTuples<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":620},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":119284,"byte_end":119296,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":457}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":119199,"byte_end":119272,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":475},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":123737,"byte_end":123750,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":483},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":123883,"byte_end":123890,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":489},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":124011,"byte_end":124017,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":654},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":123534,"byte_end":123538,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"Diff::{FirstMismatch, Shorter, Longer}","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":483},{"krate":0,"index":489}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":124766,"byte_end":124775,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"fn <I, J, F> (i: I, j: J, is_equal: F) -> Option<Diff<I::IntoIter, J::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":664},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":125895,"byte_end":125905,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":511}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1848},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":126328,"byte_end":126334,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":1809},{"krate":0,"index":1811}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":702},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":129611,"byte_end":129614,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":744},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":139080,"byte_end":139087,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":609}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":138995,"byte_end":139068,"line_start":288,"line_end":288,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":762},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":140954,"byte_end":140960,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":639}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":140869,"byte_end":140942,"line_start":358,"line_end":358,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":141828,"byte_end":141833,"line_start":393,"line_end":393,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":663}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":784},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":143768,"byte_end":143778,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":687}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":143683,"byte_end":143756,"line_start":464,"line_end":464,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":800},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":144901,"byte_end":144907,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":699}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":144816,"byte_end":144889,"line_start":509,"line_end":509,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":808},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":145625,"byte_end":145630,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":715}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1896},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":146674,"byte_end":146685,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":1865},{"krate":0,"index":1867},{"krate":0,"index":1869}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":146572,"byte_end":146645,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":864},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":150886,"byte_end":150892,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMerge {  }","parent":null,"children":[{"krate":0,"index":745}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":150801,"byte_end":150874,"line_start":114,"line_end":114,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":868},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":151412,"byte_end":151418,"line_start":140,"line_end":140,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"fn <I> (iterable: I) -> KMerge<<I::Item as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":882},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":153072,"byte_end":153080,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":769}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":152987,"byte_end":153060,"line_start":196,"line_end":196,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":886},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":153459,"byte_end":153468,"line_start":214,"line_end":214,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"fn <I, F> (iterable: I, mut less_than: F) -> KMergeBy<<I::Item as IntoIterator>::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":912},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":155191,"byte_end":155204,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"fn <I, J, F> (left: I, right: J, cmp_fn: F) -> MergeJoinBy<I::IntoIter, J::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":914},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":155830,"byte_end":155841,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":807}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":155745,"byte_end":155818,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1885},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":157850,"byte_end":157860,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":1918},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1887},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":157942,"byte_end":157952,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":1918},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1891},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":158065,"byte_end":158071,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":1918},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1918},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":157805,"byte_end":157817,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"MinMaxResult::{NoElements, OneElement, MinMax}","parent":null,"children":[{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1891}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":157796,"byte_end":158079,"line_start":5,"line_end":15,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":158889,"byte_end":158900,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"fn (self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1936},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":161700,"byte_end":161709,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911}],"decl_id":null,"docs":" See [`multipeek()`](../fn.multipeek.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":944},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":161935,"byte_end":161944,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"fn <I> (iterable: I) -> MultiPeek<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":162226,"byte_end":162236,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the peeking “cursor”\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":162500,"byte_end":162504,"line_start":43,"line_end":43,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1946},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":164303,"byte_end":164311,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":164218,"byte_end":164291,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":998},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":166509,"byte_end":166520,"line_start":15,"line_end":15,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":1000}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":166704,"byte_end":166716,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"fn <F> (&mut self, accept: F) -> Option<Self::Item>","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1014},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":168235,"byte_end":168251,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":881},{"krate":0,"index":883}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":168150,"byte_end":168223,"line_start":79,"line_end":79,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1992},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":170737,"byte_end":170751,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":1989},{"krate":0,"index":1991}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":170635,"byte_end":170708,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1038},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":172656,"byte_end":172671,"line_start":71,"line_end":71,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"fn <I, F, T, E, R> (iterable: I, processor: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1998},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":173195,"byte_end":173203,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":2001},{"krate":0,"index":2003}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1044},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":173406,"byte_end":173416,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"fn <I> (iterable: I) -> PutBackN<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":173999,"byte_end":174007,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order of the most recently put back\n values first.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":173978,"byte_end":173987,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2008},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":174638,"byte_end":174644,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":2011}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2011},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":174686,"byte_end":174692,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":2008},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1066},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":175961,"byte_end":175967,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"fn <I> (iterable: I) -> RcIter<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2014},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":177474,"byte_end":177481,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":2017},{"krate":0,"index":2019}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":177380,"byte_end":177445,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1094},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":177598,"byte_end":177606,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"fn <A> (element: A, n: usize) -> RepeatN<A>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1138},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":181217,"byte_end":181227,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":951}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1142},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":181919,"byte_end":181930,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"fn <F, A> (function: F) -> RepeatCall<F>","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1152},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":183537,"byte_end":183543,"line_start":97,"line_end":97,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"fn <A, St, F> (initial_state: St, f: F) -> Unfold<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2024},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":183969,"byte_end":183975,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":2027},{"krate":0,"index":2029}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":183892,"byte_end":183957,"line_start":114,"line_end":114,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2029},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184083,"byte_end":184088,"line_start":118,"line_end":118,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":2024},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2030},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184748,"byte_end":184755,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":2039},{"krate":0,"index":2041}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184671,"byte_end":184736,"line_start":144,"line_end":144,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1174},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":185512,"byte_end":185519,"line_start":180,"line_end":180,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"fn <St, F> (initial_value: St, f: F) -> Iterate<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2044},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,101,101,46,114,115],"byte_start":186240,"byte_end":186243,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":2063},{"krate":0,"index":2065}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,101,101,46,114,115],"byte_start":186138,"byte_end":186211,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2050},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":188089,"byte_end":188100,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":2071},{"krate":0,"index":2073}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1216},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":189326,"byte_end":189332,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1011}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":189241,"byte_end":189314,"line_start":64,"line_end":64,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":190371,"byte_end":190382,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"fn (self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2056},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":190746,"byte_end":190758,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":2081},{"krate":0,"index":2083}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":190644,"byte_end":190717,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1240},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":192055,"byte_end":192067,"line_start":174,"line_end":174,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1242},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":192086,"byte_end":192090,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1244},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":192101,"byte_end":192107,"line_start":176,"line_end":176,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":192186,"byte_end":192203,"line_start":178,"line_end":178,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"fn <I> (iter: I, buf: &mut Self::Buffer) -> Option<Self>","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":192314,"byte_end":192338,"line_start":181,"line_end":181,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"fn <I> (iter: I) -> Option<Self>","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":192425,"byte_end":192434,"line_start":184,"line_end":184,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"fn () -> usize","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":192455,"byte_end":192470,"line_start":186,"line_end":186,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"fn (&mut self, item: Self::Item) -> ()","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2126},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":195197,"byte_end":195205,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":2127},{"krate":0,"index":2129},{"krate":0,"index":2131}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":195112,"byte_end":195185,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2134},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":197827,"byte_end":197833,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":2141}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":197742,"byte_end":197815,"line_start":111,"line_end":111,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1306},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":198634,"byte_end":198646,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1073}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":198549,"byte_end":198622,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199263,"byte_end":199268,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2151},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199333,"byte_end":199339,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2155},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199382,"byte_end":199386,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2159},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199429,"byte_end":199433,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2142},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199210,"byte_end":199218,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"Position::{First, Middle, Last, Only}","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2151},{"krate":0,"index":2155},{"krate":0,"index":2159}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199201,"byte_end":199439,"line_start":31,"line_end":40,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199506,"byte_end":199516,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2160},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":201322,"byte_end":201327,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":2175},{"krate":0,"index":2177}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":201237,"byte_end":201310,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1328},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":201702,"byte_end":201708,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"fn <I, J> (i: I, j: J) -> ZipEq<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2170},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":203133,"byte_end":203143,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":2191},{"krate":0,"index":2193}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":203048,"byte_end":203121,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2180},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":205167,"byte_end":205170,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":2205}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":205082,"byte_end":205155,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1376},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":206334,"byte_end":206342,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"fn <T, U> (t: U) -> Zip<T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1384},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8105,"byte_end":8114,"line_start":283,"line_end":283,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510}],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8513,"byte_end":8523,"line_start":298,"line_end":298,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"fn <J> (self, other: J) -> Interleave<Self, J::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9046,"byte_end":9065,"line_start":316,"line_end":316,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"fn <J> (self, other: J) -> InterleaveShortest<Self, J::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9644,"byte_end":9655,"line_start":335,"line_end":335,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"fn (self, element: Self::Item) -> Intersperse<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10898,"byte_end":10909,"line_start":369,"line_end":369,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"fn <J> (self, other: J) -> ZipLongest<Self, J::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10881,"byte_end":10890,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11347,"byte_end":11353,"line_start":382,"line_end":382,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"fn <J> (self, other: J) -> ZipEq<Self, J::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11330,"byte_end":11339,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12268,"byte_end":12276,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"fn <B, F> (self, f: F) -> Batching<Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13907,"byte_end":13915,"line_start":453,"line_end":453,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"fn <K, F> (self, key: F) -> GroupBy<K, Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an *iterable* that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13872,"byte_end":13899,"line_start":452,"line_end":452,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15194,"byte_end":15200,"line_start":489,"line_end":489,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"fn (self, size: usize) -> IntoChunks<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an *iterable* that can chunk the iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15159,"byte_end":15186,"line_start":488,"line_end":488,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16556,"byte_end":16569,"line_start":527,"line_end":527,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"fn <T> (self) -> TupleWindows<Self, T>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17878,"byte_end":17884,"line_start":566,"line_end":566,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"fn <T> (self) -> Tuples<Self, T>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18693,"byte_end":18696,"line_start":591,"line_end":591,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"fn (self) -> (Tee<Self>, Tee<Self>)","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18658,"byte_end":18685,"line_start":590,"line_end":590,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19334,"byte_end":19338,"line_start":614,"line_end":614,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"fn (self, n: usize) -> Step<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19855,"byte_end":19866,"line_start":631,"line_end":631,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"fn <F, T, U, E> (self, f: F) -> MapResults<Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20529,"byte_end":20534,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"fn <J> (self, other: J) -> Merge<Self, J::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21311,"byte_end":21319,"line_start":676,"line_end":676,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"fn <J, F> (self, other: J, is_first: F) -> MergeBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like `.merge()` but allows for a custom ordering.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22909,"byte_end":22922,"line_start":716,"line_end":716,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"fn <J, F> (self, other: J, cmp_fn: F) -> MergeJoinBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22892,"byte_end":22901,"line_start":715,"line_end":715,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23756,"byte_end":23762,"line_start":742,"line_end":742,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"fn (self) -> KMerge<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23721,"byte_end":23748,"line_start":741,"line_end":741,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24767,"byte_end":24776,"line_start":771,"line_end":771,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"fn <F> (self, first: F) -> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them according to the given closure.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24732,"byte_end":24759,"line_start":770,"line_end":770,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25528,"byte_end":25545,"line_start":792,"line_end":792,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"fn <J> (self, other: J) -> Product<Self, J::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27000,"byte_end":27023,"line_start":827,"line_end":827,"column_start":8,"column_end":31},"name":"multi_cartesian_product","qualname":"::Itertools::multi_cartesian_product","value":"fn (self) -> MultiProduct<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n all subiterators returned by meta-iterator `self`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26965,"byte_end":26992,"line_start":826,"line_end":826,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28516,"byte_end":28524,"line_start":864,"line_end":864,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"fn <F> (self, f: F) -> Coalesce<Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29238,"byte_end":29243,"line_start":886,"line_end":886,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"fn (self) -> Dedup<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29934,"byte_end":29940,"line_start":908,"line_end":908,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"fn (self) -> Unique<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29899,"byte_end":29926,"line_start":907,"line_end":907,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30697,"byte_end":30706,"line_start":930,"line_end":930,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"fn <V, F> (self, f: F) -> UniqueBy<Self, V, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30662,"byte_end":30689,"line_start":929,"line_end":929,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1434},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31443,"byte_end":31461,"line_start":950,"line_end":950,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"fn <F> (&mut self, accept: F) -> PeekingTakeWhile<Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32407,"byte_end":32421,"line_start":975,"line_end":975,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"fn <F> (&mut self, accept: F) -> TakeWhileRef<Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1438},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33087,"byte_end":33097,"line_start":996,"line_end":996,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"fn <A> (self) -> WhileSome<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34528,"byte_end":34546,"line_start":1035,"line_end":1035,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"fn <T> (self) -> TupleCombinations<Self, T>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35352,"byte_end":35364,"line_start":1061,"line_end":1061,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"fn (self, n: usize) -> Combinations<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `n`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35317,"byte_end":35344,"line_start":1060,"line_end":1060,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36194,"byte_end":36203,"line_start":1085,"line_end":1085,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"fn <F> (self, min: usize, f: F) -> PadUsing<Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36925,"byte_end":36932,"line_start":1108,"line_end":1108,"column_start":8,"column_end":15},"name":"flatten","qualname":"::Itertools::flatten","value":"fn (self) -> Flatten<Self, <Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Flatten an iterator of iterables into a single combined sequence of all\n the elements in the iterables.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37857,"byte_end":37870,"line_start":1134,"line_end":1134,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"fn (self) -> WithPosition<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38549,"byte_end":38558,"line_start":1153,"line_end":1153,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"fn <P> (self, predicate: P) -> Positions<Self, P>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39111,"byte_end":39117,"line_start":1170,"line_end":1170,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"fn <F> (self, updater: F) -> Update<Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39742,"byte_end":39752,"line_start":1191,"line_end":1191,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"fn <T> (&mut self) -> Option<T>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40494,"byte_end":40507,"line_start":1216,"line_end":1216,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"fn <T> (mut self) -> Option<T>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41188,"byte_end":41201,"line_start":1240,"line_end":1240,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"fn <P> (&mut self, mut pred: P) -> Option<(usize, Self::Item)>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42050,"byte_end":42059,"line_start":1269,"line_end":1269,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42739,"byte_end":42747,"line_start":1290,"line_end":1290,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43440,"byte_end":43453,"line_start":1314,"line_end":1314,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44176,"byte_end":44183,"line_start":1341,"line_end":1341,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"fn <F> (self, mut f: F) -> ()","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44846,"byte_end":44852,"line_start":1361,"line_end":1361,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"fn (self) -> Self::Item","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45180,"byte_end":45191,"line_start":1371,"line_end":1371,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of `.collect()`,\n for convenience.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45145,"byte_end":45172,"line_start":1370,"line_end":1370,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45808,"byte_end":45816,"line_start":1393,"line_end":1393,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"fn <'a, A, J> (&mut self, from: J) -> usize","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45791,"byte_end":45800,"line_start":1392,"line_end":1392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46560,"byte_end":46564,"line_start":1419,"line_end":1419,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"fn (&mut self, sep: &str) -> String","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46525,"byte_end":46552,"line_start":1418,"line_end":1418,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47692,"byte_end":47698,"line_start":1453,"line_end":1453,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"fn (self, sep: &str) -> Format<Self>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49176,"byte_end":49187,"line_start":1491,"line_end":1491,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"fn <F> (self, sep: &str, format: F) -> FormatWith<Self, F>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50908,"byte_end":50920,"line_start":1540,"line_end":1540,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"fn <A, E, B, F> (&mut self, mut start: B, mut f: F) -> Result<B, E>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52077,"byte_end":52089,"line_start":1572,"line_end":1572,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"fn <A, B, F> (&mut self, mut start: B, mut f: F) -> Option<B>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52889,"byte_end":52894,"line_start":1597,"line_end":1597,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"fn <F> (mut self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54958,"byte_end":54968,"line_start":1653,"line_end":1653,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"fn <F> (mut self, mut f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58464,"byte_end":58474,"line_start":1751,"line_end":1751,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"fn <B, F> (&mut self, init: B, mut f: F) -> FoldWhile<B>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59416,"byte_end":59422,"line_start":1779,"line_end":1779,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Collect all iterator elements into a sorted vector in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59381,"byte_end":59408,"line_start":1778,"line_end":1778,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60318,"byte_end":60327,"line_start":1807,"line_end":1807,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"fn <F> (self, cmp: F) -> Vec<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Collect all iterator elements into a sorted vector.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":60283,"byte_end":60310,"line_start":1806,"line_end":1806,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61310,"byte_end":61323,"line_start":1838,"line_end":1838,"column_start":8,"column_end":21},"name":"sorted_by_key","qualname":"::Itertools::sorted_by_key","value":"fn <K, F> (self, f: F) -> Vec<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Collect all iterator elements into a sorted vector.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61275,"byte_end":61302,"line_start":1837,"line_end":1837,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62268,"byte_end":62281,"line_start":1870,"line_end":1870,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"fn <A, B, F, L, R> (self, predicate: F) -> (A, B)","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike `Iterator::partition`, each partition may\n have a distinct type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":63391,"byte_end":63405,"line_start":1904,"line_end":1904,"column_start":8,"column_end":22},"name":"into_group_map","qualname":"::Itertools::into_group_map","value":"fn <K, V> (self) -> HashMap<K, Vec<V>>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values\n are taken from `(Key, Value)` tuple pairs yielded by the input iterator.\n \n ```\n use itertools::Itertools;\n \n let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];\n let lookup = data.into_iter().into_group_map();\n \n assert_eq!(lookup[&0], vec![10, 20]);\n assert_eq!(lookup.get(&1), None);\n assert_eq!(lookup[&2], vec![12, 42]);\n assert_eq!(lookup[&3], vec![13, 33]);\n ```\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":63356,"byte_end":63383,"line_start":1903,"line_end":1903,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":64868,"byte_end":64874,"line_start":1946,"line_end":1946,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"fn (self) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65570,"byte_end":65583,"line_start":1963,"line_end":1963,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"fn <K, F> (self, key: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66221,"byte_end":66230,"line_start":1977,"line_end":1977,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"fn <F> (self, mut compare: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1384},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1514},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66959,"byte_end":66964,"line_start":2001,"line_end":2001,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"fn <I, J> (a: I, b: J) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1516},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":67784,"byte_end":67796,"line_start":2029,"line_end":2029,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"fn <I, J> (a: I, b: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1518},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69023,"byte_end":69032,"line_start":2071,"line_end":2071,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"fn <'a, A, I, F> (iter: I, mut pred: F) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2429},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69953,"byte_end":69961,"line_start":2101,"line_end":2101,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":2302},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2433},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70022,"byte_end":70026,"line_start":2103,"line_end":2103,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":2302},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2302},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69893,"byte_end":69902,"line_start":2099,"line_end":2099,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"FoldWhile::{Continue, Done}","parent":null,"children":[{"krate":0,"index":2429},{"krate":0,"index":2433}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69884,"byte_end":70032,"line_start":2099,"line_end":2104,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70118,"byte_end":70128,"line_start":2108,"line_end":2108,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70321,"byte_end":70328,"line_start":2115,"line_end":2115,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":105860,"byte_end":105872,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":107978,"byte_end":107994,"line_start":117,"line_end":117,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":108642,"byte_end":108654,"line_start":146,"line_end":146,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":72535,"byte_end":72545,"line_start":64,"line_end":64,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73956,"byte_end":73974,"line_start":120,"line_end":120,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76224,"byte_end":76231,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76850,"byte_end":76857,"line_start":230,"line_end":230,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78704,"byte_end":78711,"line_start":303,"line_end":303,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81143,"byte_end":81151,"line_start":378,"line_end":378,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81379,"byte_end":81387,"line_start":387,"line_end":387,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82427,"byte_end":82431,"line_start":431,"line_end":431,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83029,"byte_end":83033,"line_start":458,"line_end":458,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83249,"byte_end":83258,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83490,"byte_end":83499,"line_start":484,"line_end":484,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85002,"byte_end":85007,"line_start":534,"line_end":534,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85244,"byte_end":85249,"line_start":545,"line_end":545,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86055,"byte_end":86060,"line_start":577,"line_end":577,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86898,"byte_end":86905,"line_start":608,"line_end":608,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1608}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87430,"byte_end":87437,"line_start":630,"line_end":630,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87705,"byte_end":87712,"line_start":642,"line_end":642,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":88172,"byte_end":88184,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89418,"byte_end":89426,"line_start":708,"line_end":708,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89595,"byte_end":89603,"line_start":717,"line_end":717,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89990,"byte_end":89998,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90631,"byte_end":90636,"line_start":762,"line_end":762,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91000,"byte_end":91005,"line_start":783,"line_end":783,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1622}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91138,"byte_end":91143,"line_start":790,"line_end":790,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92352,"byte_end":92364,"line_start":834,"line_end":834,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92701,"byte_end":92713,"line_start":847,"line_end":847,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93812,"byte_end":93821,"line_start":889,"line_end":889,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95130,"byte_end":95147,"line_start":940,"line_end":940,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95399,"byte_end":95416,"line_start":956,"line_end":956,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95534,"byte_end":95551,"line_start":962,"line_end":962,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":98912,"byte_end":98919,"line_start":1077,"line_end":1077,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":100493,"byte_end":100503,"line_start":1133,"line_end":1133,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":101794,"byte_end":101803,"line_start":1184,"line_end":1184,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":102292,"byte_end":102301,"line_start":1206,"line_end":1206,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":103139,"byte_end":103145,"line_start":1238,"line_end":1238,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":104011,"byte_end":104017,"line_start":1274,"line_end":1274,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":104123,"byte_end":104129,"line_start":1280,"line_end":1280,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118584,"byte_end":118594,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":119419,"byte_end":119431,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":120094,"byte_end":120106,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":121785,"byte_end":121795,"line_start":109,"line_end":109,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":122731,"byte_end":122741,"line_start":155,"line_end":155,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":126986,"byte_end":126996,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":127745,"byte_end":127751,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":129713,"byte_end":129714,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":130019,"byte_end":130029,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":130225,"byte_end":130235,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":131277,"byte_end":131287,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":138065,"byte_end":138075,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":139887,"byte_end":139894,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":141101,"byte_end":141107,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":142017,"byte_end":142022,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":142193,"byte_end":142198,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":144030,"byte_end":144040,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":788},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":145026,"byte_end":145032,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":145791,"byte_end":145796,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":145955,"byte_end":145960,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":147058,"byte_end":147069,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":148408,"byte_end":148416,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":149312,"byte_end":149320,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":150974,"byte_end":150980,"line_start":121,"line_end":121,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1912}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":151903,"byte_end":151909,"line_start":153,"line_end":153,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":152078,"byte_end":152084,"line_start":162,"line_end":162,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":153187,"byte_end":153195,"line_start":204,"line_end":204,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":154112,"byte_end":154120,"line_start":230,"line_end":230,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":155976,"byte_end":155987,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1916}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":156212,"byte_end":156223,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":158096,"byte_end":158108,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":162139,"byte_end":162148,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":162301,"byte_end":162310,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":162954,"byte_end":162963,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":163430,"byte_end":163439,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":163863,"byte_end":163872,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":164697,"byte_end":164705,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":165468,"byte_end":165476,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":165933,"byte_end":165941,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":166837,"byte_end":166845,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":167165,"byte_end":167172,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":167589,"byte_end":167597,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":168552,"byte_end":168568,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169656,"byte_end":169660,"line_start":135,"line_end":135,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1954}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169712,"byte_end":169717,"line_start":136,"line_end":136,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1958}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169766,"byte_end":169777,"line_start":137,"line_end":137,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169826,"byte_end":169831,"line_start":138,"line_end":138,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1966}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169886,"byte_end":169890,"line_start":139,"line_end":139,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1970}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169948,"byte_end":169952,"line_start":140,"line_end":140,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":170004,"byte_end":170009,"line_start":141,"line_end":141,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":170109,"byte_end":170113,"line_start":143,"line_end":143,"column_start":67,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1982}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":170215,"byte_end":170219,"line_start":145,"line_end":145,"column_start":65,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":170418,"byte_end":170421,"line_start":149,"line_end":149,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1990}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":170849,"byte_end":170863,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":173589,"byte_end":173597,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":174099,"byte_end":174107,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":176123,"byte_end":176129,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":176264,"byte_end":176270,"line_start":60,"line_end":60,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":176829,"byte_end":176835,"line_start":79,"line_end":79,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":177810,"byte_end":177817,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":178207,"byte_end":178214,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":178364,"byte_end":178371,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":181269,"byte_end":181279,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":182053,"byte_end":182063,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":183732,"byte_end":183738,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2022}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184125,"byte_end":184131,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184820,"byte_end":184827,"line_start":150,"line_end":150,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2036}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184930,"byte_end":184937,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1170},{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,101,101,46,114,115],"byte_start":186651,"byte_end":186654,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,101,101,46,114,115],"byte_start":187751,"byte_end":187754,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":188179,"byte_end":188190,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":188363,"byte_end":188374,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":189040,"byte_end":189051,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":189700,"byte_end":189706,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":189918,"byte_end":189924,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1228}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":191531,"byte_end":191543,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":195347,"byte_end":195355,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":196153,"byte_end":196161,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1280},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":196878,"byte_end":196884,"line_start":79,"line_end":79,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":197911,"byte_end":197917,"line_start":116,"line_end":116,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2140}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199449,"byte_end":199457,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199736,"byte_end":199748,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":200984,"byte_end":200996,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":201914,"byte_end":201919,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":202497,"byte_end":202502,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":203424,"byte_end":203434,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":204056,"byte_end":204066,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":204887,"byte_end":204897,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66537,"byte_end":66538,"line_start":1988,"line_end":1988,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70042,"byte_end":70051,"line_start":2106,"line_end":2106,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3396,"byte_end":3400,"line_start":124,"line_end":124,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":540}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":105860,"byte_end":105872,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1526},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":107978,"byte_end":107994,"line_start":117,"line_end":117,"column_start":9,"column_end":25},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,117,108,116,105,95,112,114,111,100,117,99,116,46,114,115],"byte_start":108642,"byte_end":108654,"line_start":146,"line_end":146,"column_start":22,"column_end":34},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":1526},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":72535,"byte_end":72545,"line_start":64,"line_end":64,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1548},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73956,"byte_end":73974,"line_start":120,"line_end":120,"column_start":25,"column_end":43},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1558},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76224,"byte_end":76231,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76850,"byte_end":76857,"line_start":230,"line_end":230,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78704,"byte_end":78711,"line_start":303,"line_end":303,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1578},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81143,"byte_end":81151,"line_start":378,"line_end":378,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81379,"byte_end":81387,"line_start":387,"line_end":387,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82427,"byte_end":82431,"line_start":431,"line_end":431,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1596},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83029,"byte_end":83033,"line_start":458,"line_end":458,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1596},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83249,"byte_end":83258,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":328},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83490,"byte_end":83499,"line_start":484,"line_end":484,"column_start":12,"column_end":21},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85002,"byte_end":85007,"line_start":534,"line_end":534,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":340},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85244,"byte_end":85249,"line_start":545,"line_end":545,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":340},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86055,"byte_end":86060,"line_start":577,"line_end":577,"column_start":25,"column_end":30},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":340},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86898,"byte_end":86905,"line_start":608,"line_end":608,"column_start":30,"column_end":37},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":358},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87430,"byte_end":87437,"line_start":630,"line_end":630,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":358},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87705,"byte_end":87712,"line_start":642,"line_end":642,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":358},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":88172,"byte_end":88184,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":1610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89418,"byte_end":89426,"line_start":708,"line_end":708,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":382},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89595,"byte_end":89603,"line_start":717,"line_end":717,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":382},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89990,"byte_end":89998,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":382},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90631,"byte_end":90636,"line_start":762,"line_end":762,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":400},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91000,"byte_end":91005,"line_start":783,"line_end":783,"column_start":24,"column_end":29},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":400},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91138,"byte_end":91143,"line_start":790,"line_end":790,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":400},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92352,"byte_end":92364,"line_start":834,"line_end":834,"column_start":31,"column_end":43},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":420},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92701,"byte_end":92713,"line_start":847,"line_end":847,"column_start":29,"column_end":41},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":420},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93812,"byte_end":93821,"line_start":889,"line_end":889,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1626},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94691,"byte_end":94696,"line_start":923,"line_end":923,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1644},"to":{"krate":0,"index":444}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95130,"byte_end":95147,"line_start":940,"line_end":940,"column_start":25,"column_end":42},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1636},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95399,"byte_end":95416,"line_start":956,"line_end":956,"column_start":21,"column_end":38},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2562}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95534,"byte_end":95551,"line_start":962,"line_end":962,"column_start":32,"column_end":49},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":98912,"byte_end":98919,"line_start":1077,"line_end":1077,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":1720},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":100493,"byte_end":100503,"line_start":1133,"line_end":1133,"column_start":34,"column_end":44},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":482},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":101794,"byte_end":101803,"line_start":1184,"line_end":1184,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":498},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":102292,"byte_end":102301,"line_start":1206,"line_end":1206,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":498},"to":{"krate":2,"index":4230}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":103139,"byte_end":103145,"line_start":1238,"line_end":1238,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":514},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":104011,"byte_end":104017,"line_start":1274,"line_end":1274,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":514},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":104123,"byte_end":104129,"line_start":1280,"line_end":1280,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":514},"to":{"krate":2,"index":4230}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118584,"byte_end":118594,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":1834},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":119419,"byte_end":119431,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":620},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":120094,"byte_end":120106,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":620},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":121785,"byte_end":121795,"line_start":109,"line_end":109,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,109,98,105,110,97,116,105,111,110,115,46,114,115],"byte_start":122731,"byte_end":122741,"line_start":155,"line_end":155,"column_start":26,"column_end":36},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1842},"to":{"krate":2,"index":1976}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":126986,"byte_end":126996,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":664},"to":{"krate":2,"index":7810}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":127745,"byte_end":127751,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":129713,"byte_end":129714,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":549},"to":{"krate":0,"index":700}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":130019,"byte_end":130029,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1890},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":130225,"byte_end":130235,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":1890},"to":{"krate":0,"index":700}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":131277,"byte_end":131287,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":722},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":138065,"byte_end":138075,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":722},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":139887,"byte_end":139894,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":141101,"byte_end":141107,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":762},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":142017,"byte_end":142022,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":1910}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":142193,"byte_end":142198,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":144030,"byte_end":144040,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":145026,"byte_end":145032,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":800},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":145791,"byte_end":145796,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":808},"to":{"krate":2,"index":1910}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":145955,"byte_end":145960,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":808},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":147058,"byte_end":147069,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":1896},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":148408,"byte_end":148416,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":149312,"byte_end":149320,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1906},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":150974,"byte_end":150980,"line_start":121,"line_end":121,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":864},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":151903,"byte_end":151909,"line_start":153,"line_end":153,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":864},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":152078,"byte_end":152084,"line_start":162,"line_end":162,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":864},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":153187,"byte_end":153195,"line_start":204,"line_end":204,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":882},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,107,109,101,114,103,101,95,105,109,112,108,46,114,115],"byte_start":154112,"byte_end":154120,"line_start":230,"line_end":230,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":882},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":155976,"byte_end":155987,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":914},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":156212,"byte_end":156223,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":914},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":158096,"byte_end":158108,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":162139,"byte_end":162148,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":162301,"byte_end":162310,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":162954,"byte_end":162963,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1936},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":163430,"byte_end":163439,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":1936},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,117,108,116,105,112,101,101,107,95,105,109,112,108,46,114,115],"byte_start":163863,"byte_end":163872,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":1936},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":164697,"byte_end":164705,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":1946},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":165468,"byte_end":165476,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1946},"to":{"krate":2,"index":4230}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":165933,"byte_end":165941,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":1946},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":166523,"byte_end":166531,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3846},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":166837,"byte_end":166845,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":2,"index":40976},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":167165,"byte_end":167172,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1568},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":167589,"byte_end":167597,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1998},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":168552,"byte_end":168568,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1014},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169656,"byte_end":169660,"line_start":135,"line_end":135,"column_start":48,"column_end":52},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":2,"index":5894},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169712,"byte_end":169717,"line_start":136,"line_end":136,"column_start":43,"column_end":48},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":2,"index":41644},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169766,"byte_end":169777,"line_start":137,"line_end":137,"column_start":43,"column_end":54},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":2,"index":41654},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169826,"byte_end":169831,"line_start":138,"line_end":138,"column_start":43,"column_end":48},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":2,"index":41664},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169886,"byte_end":169890,"line_start":139,"line_end":139,"column_start":49,"column_end":53},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":2,"index":41102},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":169948,"byte_end":169952,"line_start":140,"line_end":140,"column_start":49,"column_end":53},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":2,"index":41206},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":170004,"byte_end":170009,"line_start":141,"line_end":141,"column_start":43,"column_end":48},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":2,"index":4130},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":170109,"byte_end":170113,"line_start":143,"line_end":143,"column_start":67,"column_end":71},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":4,"index":1936},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":170215,"byte_end":170219,"line_start":145,"line_end":145,"column_start":65,"column_end":69},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":4,"index":2400},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":170418,"byte_end":170421,"line_start":149,"line_end":149,"column_start":39,"column_end":42},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":2,"index":40878},"to":{"krate":0,"index":998}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":170849,"byte_end":170863,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":1992},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":173589,"byte_end":173597,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":1998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,117,116,95,98,97,99,107,95,110,95,105,109,112,108,46,114,115],"byte_start":174099,"byte_end":174107,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1998},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":176123,"byte_end":176129,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":2008},"to":{"krate":2,"index":2506}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":176264,"byte_end":176270,"line_start":60,"line_end":60,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":2008},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,99,105,116,101,114,95,105,109,112,108,46,114,115],"byte_start":176829,"byte_end":176835,"line_start":79,"line_end":79,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":2008},"to":{"krate":2,"index":4230}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":177810,"byte_end":177817,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":2014},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":178207,"byte_end":178214,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":2014},"to":{"krate":2,"index":4230}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":178364,"byte_end":178371,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":2014},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":181269,"byte_end":181279,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":1138},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":182053,"byte_end":182063,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":1138},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":183732,"byte_end":183738,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":2024},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184125,"byte_end":184131,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":2024},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184820,"byte_end":184827,"line_start":150,"line_end":150,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":2030},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":184930,"byte_end":184937,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":2030},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,101,101,46,114,115],"byte_start":186651,"byte_end":186654,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":2044},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,101,101,46,114,115],"byte_start":187751,"byte_end":187754,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":2044},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":188179,"byte_end":188190,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":2050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":188363,"byte_end":188374,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":2050},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":189040,"byte_end":189051,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":2050},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":189700,"byte_end":189706,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":1216},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":189918,"byte_end":189924,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":1216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":191531,"byte_end":191543,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":2056},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":192069,"byte_end":192074,"line_start":174,"line_end":174,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1644},"to":{"krate":0,"index":1240}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":195347,"byte_end":195355,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":2126},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":196153,"byte_end":196161,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":2126},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":196878,"byte_end":196884,"line_start":79,"line_end":79,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[118]},"from":{"krate":0,"index":2134},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,117,110,105,113,117,101,95,105,109,112,108,46,114,115],"byte_start":197911,"byte_end":197917,"line_start":116,"line_end":116,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[119]},"from":{"krate":0,"index":2134},"to":{"krate":2,"index":7806}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199449,"byte_end":199457,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"kind":{"variant":"Impl","fields":[120]},"from":{"krate":0,"index":2142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":199736,"byte_end":199748,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"kind":{"variant":"Impl","fields":[121]},"from":{"krate":0,"index":1306},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":200984,"byte_end":200996,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"kind":{"variant":"Impl","fields":[122]},"from":{"krate":0,"index":1306},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":201914,"byte_end":201919,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"variant":"Impl","fields":[123]},"from":{"krate":0,"index":2160},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":202497,"byte_end":202502,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[124]},"from":{"krate":0,"index":2160},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":203424,"byte_end":203434,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[125]},"from":{"krate":0,"index":2170},"to":{"krate":2,"index":3846}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":204056,"byte_end":204066,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[126]},"from":{"krate":0,"index":2170},"to":{"krate":2,"index":4230}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":204887,"byte_end":204897,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"variant":"Impl","fields":[127]},"from":{"krate":0,"index":2170},"to":{"krate":2,"index":4244}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8117,"byte_end":8125,"line_start":283,"line_end":283,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3846},"to":{"krate":0,"index":1384}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66537,"byte_end":66538,"line_start":1988,"line_end":1988,"column_start":31,"column_end":32},"kind":{"variant":"Impl","fields":[128]},"from":{"krate":0,"index":1269},"to":{"krate":0,"index":1384}},{"span":{"file_name":[47,85,115,101,114,115,47,97,109,111,114,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70042,"byte_end":70051,"line_start":2106,"line_end":2106,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[129]},"from":{"krate":0,"index":2302},"to":{"krate":4294967295,"index":4294967295}}]}